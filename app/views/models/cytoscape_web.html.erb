<%= javascript_include_tag "swfobject","cytoscape_web/index" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html>

    <head>
        <title><%= t('model') %> Visualization with Cytoscape Web</title>
        <script type="text/javascript">
          // id of Cytoscape Web container div
                var div_id = "cytoscapeweb";
                var options = {
                    // where you have the Cytoscape Web SWF
                    swfPath: "/swfs/CytoscapeWeb",
                    // where you have the Flash installer SWF
                    flashInstallerPath: "/swfs/playerProductInstall"
                };
               // init and draw
                var vis = new org.cytoscapeweb.Visualization(div_id, options);
                // data validation hash for properties of nodes and edges
               var nodesDataSchema = {};
               var edgesDataSchema = {};
               var dataValidation = {};
               window.onload = function() {
                // convert xgmml file content to a string
                var network_xgmml = <%= @graph.html_safe %> ;
                // initialization options

                // callback when Cytoscape Web has finished drawing
                vis.ready(function() {

                    //get all data fields of nodes and edges
                    nodesDataSchema = getDataSchema("nodes");
                    edgesDataSchema = getDataSchema("edges");

                    var comment_field = { name: "Comment", type: "string", defValue: null };
                    //Add new comment field to nodes and edges if not existed:
                    if (checkDataField("nodes","Comment") == undefined) {
                        vis.addDataField("nodes",comment_field);
                        nodesDataSchema = getDataSchema("nodes");
                    }
                    if (checkDataField("edges","Comment") == undefined) {
                        vis.addDataField("edges",comment_field);
                        edgesDataSchema = getDataSchema("edges");
                    }

                    // add a listener for when nodes and edges are clicked
                    vis.addListener("click", "nodes", function(event) {
                        //Add new comment field to nodes and edges if not existed:
                        handle_click(event,"nodes");
                    })
                    .addListener("click", "edges", function(event) {
                        handle_click(event,"edges");
                    });

                    function handle_click(event,group_id) {
                         var target = event.target;
                         if (group_id == "nodes"){
                             clear("edges");
                         }
                         if (group_id == "edges") {
                             clear("nodes");
                         }

                         print_properties(group_id,target);

                    }

                    function clear(group_id) {
                        var element =  document.getElementById(group_id);
                        var table_id = group_id + "_table";
                        var table = document.getElementById(table_id);
                        if (table != null) {
                           element.removeChild(table);
                        }
                        element.innerHTML = "No " + group_id + " are selected.";
                    }

                    function print_properties(group_id, target) {
                        var element = document.getElementById(group_id);
                         element.innerHTML = "";
                        var table_id = group_id + "_table";
                        var table = document.getElementById(table_id);
                        if (table == null) {
                            table = document.createElement('table');
                            table.id = table_id;
                            table.class = "properties_table";


                            if(target.data["Comment"] == undefined){
                               target.data["Comment"] = null;
                               vis.updateData([target]);
                            }

                            var sorted_keys = sort_keys(target.data);

                            for (var i in sorted_keys) {
                                var variable_name = sorted_keys[i];
                                var variable_value = target.data[variable_name];
                                var row = document.createElement('tr');
                                var col1 = document.createElement('th');
                                if (variable_name == 'name')
                                    col1.textContent = 'type of the node';
                                else
                                    col1.textContent = variable_name;
                                col1.textAlign = "left";
                                var col2 = document.createElement('td');
                                switch(variable_name){
                                    // non-editable attributes:
                                    case "id":
                                    case "description":
                                    case "Synonym":
                                    case "Smiles":
                                        col2.textContent = variable_value;
                                        break;
                                    // linkable attributes:
                                    case "Uniprot":
                                        if (variable_value != null && variable_value != "Unspecified") {
                                            var url = document.createElement('a');
                                            url.href = 'http://www.uniprot.org/uniprot/' + variable_value;
                                            url.textContent = variable_value;
                                            url.target = "_blank";
                                            col2.appendChild(url);
                                        } else {
                                            col2.textContent = variable_value;
                                        }

                                        break;
                                    case "label":
                                        if (variable_value != null && variable_value.indexOf("CHEMBL") != -1 && group_id == "nodes") {
                                            // compound/target CHEMBLs
                                            var url = document.createElement('a');
                                            if(target.data["Uniprot"] == null){
                                               url.href = 'https://www.ebi.ac.uk/chembldb/compound/inspect/' + variable_value;
                                            }else{
                                               url.href = 'https://www.ebi.ac.uk/chembldb/target/inspect/' + variable_value;
                                            }
                                            url.textContent = variable_value;
                                            url.target = "_blank";
                                            col2.appendChild(url);
                                        } else {
                                            var input_text = document.createElement('input');
                                            createEditableElement(input_text, target, variable_name, variable_value,group_id);
                                            col2.appendChild(input_text);
                                        }
                                        break;
                                    // editable attributes
                                    default:
                                        // attributes with keywords are un-editable
                                        var key_words = ["BindingAffinity","EvidenceType","ActivityComment","Extra Data"];
                                        for(var i in key_words) {
                                            if (variable_name.indexOf(key_words[i]) == 0) {
                                                col2.textContent = variable_value;
                                                break;
                                            } else {
                                                //others are editable
                                                if (i == (key_words.length - 1)) {
                                                    var input_text = document.createElement('input');
                                                    createEditableElement(input_text, target, variable_name, variable_value,group_id);
                                                    col2.appendChild(input_text);
                                                }
                                            }
                                        }
                                        break;
                                }
                                row.appendChild(col1);
                                row.appendChild(col2);

                                //hide null attributes except 'Comment'
                                if(variable_value == null){

                                   if( variable_name =="Comment"){
                                     table.appendChild(row);
                                   }
                                }else{
                                    table.appendChild(row);
                                }

                            }
                            element.appendChild(table);
                        }
                    }
                });

                vis.draw({ network: network_xgmml,layout:"Preset"});


               };

          function sort_keys(hash) {
              var keys = [],
                      k, i, len;
              for (k in hash) {
                  if (hash.hasOwnProperty(k)) {
                      keys.push(k);
                  }
              }
              keys.sort();
              return keys;
          }

          function checkDataField(group_id, field){
                  var val = group_id == "nodes"? nodesDataSchema[field] : (group_id == "edges"? edgesDataSchema[field] : -1);
                  return val;
              }
              function createEditableElement(element, target, variable_name, variable_value,group_id) {
                  var input_text = element;

                   dataValidation = ( (group_id == "nodes")? nodesDataSchema : edgesDataSchema );
                  if (dataValidation[variable_name]["type"] == "boolean") {
                      input_text.type = "checkbox";
                      input_text.value = (variable_value == "true" ? true : false)

                  } else {

                      input_text.type = "text";
                      if(variable_value == null){
                         input_text.value = "null"
                      }else{
                         input_text.value = variable_value;
                      }

                  }
                  input_text.id = variable_name;

                  // in place editing and validation
                  input_text.onchange = function() {

                      var value = this.value;

                      var type = dataValidation[this.id]["type"];
                      switch (type) {
                          case "number":
                          case "real":
                              if (parseFloat(value) == value) {
                                  target.data[this.id] = parseFloat(value);
                              }
                              else
                                  target.data[this.id] = value;
                              break;
                          case "integer":
                          case "int":

                              if (parseInt(value) == value) {
                                  target.data[this.id] = parseInt(value);
                              }
                              else
                                  target.data[this.id] = value;
                              break;
                          case "string":
                              target.data[this.id] = value;
                              break;
                          case "boolean":
                              value = this.checked;
                              if (value == true) {
                                  target.data[this.id] = true;
                              }
                              else {
                                  if (value == false) {
                                      target.data[this.id] = false;
                                  }
                                  else
                                      target.data[this.id] = value;
                              }

                              break;
                          default:
                              target.data[this.id] = value;
                              break;
                      }

                      vis.updateData([target]);
                  };
              }
              function getDataSchema(group_id) {
                  var schema = vis.dataSchema();
                  var dataFields = (group_id == "nodes"? schema.nodes : (group_id== "edges"? schema.edges : []));
                  var data = {};
                 for (var j in dataFields) {
                        var field_name;
                        var field_value = {};
                        for (var k in dataFields[j]) {
                            if (k == "name") {
                                field_name = dataFields[j][k];
                            } else {
                                field_value[k] = dataFields[j][k];
                            }
                        }
                        data[field_name] = field_value;
                    }
                  return data;

              }

               function export_vis(format) {
                  vis.exportNetwork('xgmml', '<%= model_path(@model)%>/export_as_xgmml?type=xml');
               }



        </script>
        <style>
            /* The Cytoscape Web container must have its dimensions set. */
            html, body { height: 100%; width: 100%; padding: 0; margin: 0; }
            #cytoscapeweb { width: 75%; height: 100%; float: left;}
            #properties {float:right; width: 24%}
            .half {height: 50%}
            .label{
              margin-top: 1em;
            }
            label.title {
                margin-top: 0.25em;
                color: white;
                padding: 0.4em 0.25em;
                background: #0B94B0;
                border-radius: 5px;

            }
            table {
              border: 1;
              cellpadding: 5;
              border-color: #00008b;
            }
            th{
              text-align: left;
              color:  #0B94B0;
              border: 1;
            }
            td{
             text-align: left;
                border: 1;
            }
        </style>
    <body>
        <div id="cytoscapeweb">
          Cytoscape Web will replace the contents here with your graph.
        </div>

        <div class="center-block">
          <input type="submit" onclick="javascript:export_vis('xgmml')" value="Export As XGMML" style="margin-top: 2">
        </div>

        <div id="properties">
          <div class="half">
            <div class="label"><label class="title">Nodes</label></div> <br/>
            <div id="nodes">
              No nodes are selected.
            </div>
          </div>
          <div class="half">
            <div class="label"><label class="title">Edges</label></div><br/>
            <div id="edges">
              No edges are selected.
            </div>
          </div>



        </div>

    </body>


</html>
